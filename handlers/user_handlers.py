import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message
from redis import Redis

from config_data.config import Stepik
from filters.filters import (IsCorrectData, IsFullName, IsValidProfileLink)
from keyboards import (BUTT_COURSES,
                       BUTT_GENDER,
                       kb_back_cancel,
                       kb_butt_cancel,
                       kb_courses,
                       kb_create_promo,
                       kb_end_quiz,
                       kb_select_gender)
from lexicon.lexicon_ru import LexiconRu, Links
from keyboards.keyboards import kb_butt_quiz
from states.states import FSMQuiz
from utils import (StepikService,
                   check_user_in_group,
                   get_username,
                   shifts_the_date_forward)
from utils.utils import MessageProcessor

user_router = Router()
logger = logging.getLogger()
logger_user_hand = logging.getLogger(__name__)

@user_router.message(F.text.lower().find('—Å–ø–∞—Å–∏–±–æ') == 0)
async def msg_thanks(msg: Message, msg_processor: MessageProcessor):
    logger_user_hand.debug('Entry')
    logger_user_hand.info(f'–°–∫–∞–∑–∞–ª –°–ø–∞—Å–∏–±–æ!:{await get_username(msg)}')
    await msg.delete()
    answer_thnks = await msg.answer(f'{await get_username(msg)}!'
                                    f' –°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–ª–æ–≤–∞!\n'
                                    '–ú—ã —ç—Ç–æ —Ü–µ–Ω–∏–º!üòá')
    await msg_processor.deletes_msg_a_delay(answer_thnks,
                                            delay=15,
                                            indication=True)
    logger_user_hand.debug('Exit')

@user_router.message(F.text == '/start')
async def cmd_start(
        msg: Message, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.info(f'cmd_start:{msg.from_user.id}'
                          f':{await get_username(msg)}')
    await msg_processor.deletes_messages(msgs_for_del=True)
    await state.clear()
    value = await msg.answer(LexiconRu.text_survey, reply_markup=kb_butt_quiz,
                             disable_web_page_preview=True)
    await msg_processor.save_msg_id(value, msgs_for_del=True)


@user_router.callback_query(F.data == 'get_promo')
async def temp(clbk: CallbackQuery):
    await clbk.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'
                                 ' —Å–∫–∏–¥–∫—Éüëá', reply_markup=kb_create_promo)
    await clbk.answer()


@user_router.callback_query(F.data == '/cancel', StateFilter(default_state))
async def clbk_cancel(clbk: CallbackQuery, state: FSMContext):
    logger_user_hand.info(f'cancel_default_state:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    msg_processor = MessageProcessor(clbk, state)
    try:
        await state.clear()
    except Exception as err:
        logger_user_hand.error(f'{err=}', exc_info=True)
    value = await clbk.message.edit_text(LexiconRu.text_survey,
                                         reply_markup=kb_butt_quiz,
                                         disable_web_page_preview=True)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await clbk.answer()


@user_router.callback_query(F.data == 'back',
                            StateFilter(FSMQuiz.fill_date_of_revocation))
async def clbk_back_fill_date(clbk: CallbackQuery, state: FSMContext):
    logger_user_hand.debug('Entry')
    logger_user_hand.info(f'[fill_date -> fill_courses]:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    try:
        await clbk.message.edit_text(LexiconRu.text_select_course,
                                     reply_markup=kb_courses)
        await state.set_state(FSMQuiz.fill_course)
        await clbk.answer()
    except Exception as err:
        logger_user_hand.error(f'{err=}')
    logger_user_hand.debug('Exit')


@user_router.callback_query(F.data == 'back', StateFilter(FSMQuiz.fill_course))
async def clbk_back_fill_course(clbk: CallbackQuery, state: FSMContext):
    logger_user_hand.info(f'[fill_courses -> fill_gender]:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    await clbk.message.edit_text(LexiconRu.text_gender,
                                 reply_markup=kb_select_gender)
    await state.set_state(FSMQuiz.fill_gender)
    await clbk.answer()


@user_router.callback_query(F.data == 'back', StateFilter(FSMQuiz.fill_gender))
async def clbk_back_fill_(
        clbk: CallbackQuery, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.info(f'[fill_gender -> fill_full_name]:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    value = await clbk.message.edit_text(LexiconRu.text_sent_fullname,
                                         reply_markup=kb_butt_cancel)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_full_name)
    await clbk.answer()


@user_router.callback_query(F.data == 'back',
                            StateFilter(FSMQuiz.fill_link_cert))
async def clbk_back_fill_link_cert(
        clbk: CallbackQuery, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.debug('Entry')
    logger_user_hand.info(f'[fill_link_cert -> fill_date]:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    value = await clbk.message.edit_text(LexiconRu.text_course_number_done,
                                         reply_markup=kb_back_cancel)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_date_of_revocation)
    await clbk.answer()
    logger_user_hand.debug('Exit')


@user_router.callback_query(F.data == 'back', StateFilter(FSMQuiz.end))
async def clbk_back_end(
        clbk: CallbackQuery, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.debug('Entry')
    logger_user_hand.info(f'[end -> fill_link_cert]:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    try:
        await msg_processor.deletes_messages(msgs_for_del=True)
    except Exception as err:
        logger_user_hand.error(f'{err.__class__.__name__=}', exc_info=True)
    value = await clbk.message.edit_text(LexiconRu.text_data_done,
                                         reply_markup=kb_back_cancel)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_link_cert)
    await clbk.answer()
    logger_user_hand.debug('Exit')


@user_router.message(StateFilter(default_state), ~F.text.in_({'/start'}),
                     F.content_type.in_(
                             {"text", "sticker", "photo", "video", "document"}))
async def msg_other(msg: Message, msg_processor: MessageProcessor):
    if msg.text == '/admin':
        await msg.delete()
        value = await msg.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üòâ')
        logger_user_hand.warning(f'–¢–∞–ø–Ω—É–ª –∞–¥–º–∏–Ω–∫—É:'
                                 f'{msg.from_user.id}:'
                                 f'{await get_username(msg)}')
        await msg_processor.deletes_msg_a_delay(value, delay=4, indication=True)
        return

    await msg.delete()
    value = await msg.answer(f'{await get_username(msg)}, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '
                             f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–ºüôÇ')
    logger_user_hand.warning(f'–†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç->'
                             f'{msg.from_user.id}:'
                             f'{await get_username(msg)}:'
                             f'{msg.content_type}:{msg.text}')
    await msg_processor.deletes_msg_a_delay(value, delay=5, indication=True)


@user_router.callback_query(F.data == '/cancel', ~StateFilter(default_state))
async def clbk_cancel_in_state(
        clbk: CallbackQuery, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.info(f'cancel_in_state:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    logger_user_hand.debug(f'Entry {clbk_cancel_in_state.__name__=}')
    try:
        await state.clear()
    except Exception as err:
        logger_user_hand.error(f'{err=}')

    value = await clbk.message.edit_text(LexiconRu.text_survey,
                                         reply_markup=kb_butt_quiz,
                                         disable_web_page_preview=True)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await clbk.answer()
    logger_user_hand.debug(f'Exit')


@user_router.callback_query(F.data == 'get_cert', StateFilter(default_state))
async def clbk_get_cert(
        clbk: CallbackQuery, state: FSMContext, msg_processor: MessageProcessor):
    logger_user_hand.info(f'–ó–∞–ø—Ä–æ—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    if not await check_user_in_group(clbk):
        logger_user_hand.info(f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ:{clbk.from_user.id}'
                              f':{await get_username(clbk)}')
        await clbk.answer('–í—ã –µ—â–µ –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É'
                          ' –õ—É—á—à–∏–π –ø–æ Python ‚ò∫Ô∏è', show_alert=True)
        return

    value = await clbk.message.edit_text(LexiconRu.text_sent_fullname,
                                         reply_markup=kb_butt_cancel)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_full_name)
    await clbk.answer()


@user_router.callback_query(F.data.in_(BUTT_GENDER),
                            StateFilter(FSMQuiz.fill_gender))
async def clbk_gender(clbk: CallbackQuery, state: FSMContext):
    logger_user_hand.info(f'–í—ã–±—Ä–∞–Ω –ø–æ–ª:{clbk.from_user.id}'
                          f':{await get_username(clbk)}:{clbk.data}')
    await state.update_data(gender=clbk.data)
    await clbk.message.edit_text(LexiconRu.text_select_course,
                                 reply_markup=kb_courses)
    await state.set_state(FSMQuiz.fill_course)
    await clbk.answer()


@user_router.callback_query(F.data.in_([name for name in BUTT_COURSES if
        name.startswith(('id_1', 'id_2', 'id_3'))]),
        StateFilter(FSMQuiz.fill_course))
async def clbk_select_course(
        clbk: CallbackQuery, state: FSMContext, stepik: Stepik,
        redis_data: Redis, w_text: bool, msg_processor: MessageProcessor):
    stepik_service = StepikService(stepik.client_id, stepik.client_secret,
                                   redis_data)
    course_id = str(clbk.data).split('_')[-1]
    logger_user_hand.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç:{clbk.from_user.id}'
                          f':{await get_username(clbk)}:{clbk.data}')
    cert = await stepik_service.check_cert_in_user(str(clbk.from_user.id),
                                                   course_id)
    logger_user_hand.debug(f'{cert=}')
    if cert:
        value = await clbk.message.edit_text('–£ –≤–∞—Å –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —ç—Ç–æ–≥–æ '
                                             '–∫—É—Ä—Å–∞ ü§ì\n–í—ã—Å—ã–ª–∞–µ–º üìú‚ò∫Ô∏è\n')
        try:
            path = await stepik_service.generate_certificate(state, clbk,
                                                             w_text=w_text,
                                                             exist_cert=True)
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            await stepik_service.send_certificate(clbk, path, state,
                                                  is_copy=True,
                                                  course_id=course_id)
        except Exception as err:
            logger_user_hand.debug(f'{err.__class__.__name__=}', exc_info=True)

        await msg_processor.deletes_msg_a_delay(value, delay=5)
        await state.clear()

        # msg_promo_id = await redis_data.get(f'{clbk.from_user.id}_msg_promo_id')
        # logger_user_hand.debug(f'–í–∑—è—Ç–∏–µ id –ø—Ä–æ–º–æ –º—Å–≥ –¥–ª—è '
        #                        f'—É–¥–∞–ª–µ–Ω–∏—è {msg_promo_id=}')
        # try:
        #     if msg_promo_id:
        #         await clbk.bot.delete_message(chat_id=str(clbk.message.chat.id),
        #                                       message_id=msg_promo_id)
        # except TelegramBadRequest as err:
        #     logger_user_hand.error(f'{err=}')
        # try:
        #     msg_promo = await msg_processor.send_message_with_delay(
        #             clbk.message.chat.id, text=LexiconRu.text_promo.format(
        #                     end_date=await shifts_the_date_forward()), delay=15,
        #             preview_link=Links.link_questions_to_ivan)
            # –∑–∞–ø–∏—Å—å –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ id –ø—Ä–æ–º–æ –º–µ—Å–∞–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            # logger_user_hand.debug(
            #         f'–ó–∞–ø–∏—Å—å id_–ø—Ä–æ–º–æ_–º—Å–≥:{clbk.from_user.id}_msg_promo_id')
            # await redis_data.set(f'{clbk.from_user.id}_msg_promo_id',
            #                      str(msg_promo.message_id))
        # except Exception as err:
        #     logger_user_hand.error(f'{err.__class__.__name__=}', exc_info=True)
        logger_user_hand.debug(f'Exit')
        return
    logger_user_hand.info(f'–°–µ—Ä—Ç –Ω–∞ —Ä—É–∫–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω:{clbk.from_user.id}'
                          f':{await get_username(clbk)}:{clbk.data}')
    await state.update_data(course=clbk.data)
    value = await clbk.message.edit_text(LexiconRu.text_course_number_done,
                                         reply_markup=kb_back_cancel)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_date_of_revocation)
    await clbk.answer()


@user_router.callback_query(F.data.in_([name for name in BUTT_COURSES if
                                        name.startswith(('id_4', 'id_5',
                                        'id_6'))]),
                            StateFilter(FSMQuiz.fill_course))
async def clbk_select_empty_course(clbk: CallbackQuery):
    await clbk.answer('–ö—É—Ä—Å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)
    logger_user_hand.warning(f'–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫—É—Ä—Å {clbk.data}:{clbk.from_user.id}:'
                             f'{await get_username(clbk)}')


@user_router.message(
        StateFilter(FSMQuiz.fill_gender, FSMQuiz.fill_course, FSMQuiz.end),
        F.content_type.in_({"text", "sticker", "photo", "video", "document"}))
async def delete_unexpected_messages(
        msg: Message, msg_processor: MessageProcessor):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞, –≤–º–µ—Å—Ç–æ
    –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    """
    logger_user_hand.warning(f"–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:{msg.content_type}:"
                             f"{msg.text}:"
                             f"{msg.from_user.id}:{await get_username(msg)}")
    await msg.delete()
    reminder = await msg.answer(
            f'{await get_username(msg)} –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è '
            f'–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–ºüôÉ')
    await msg_processor.deletes_msg_a_delay(reminder, delay=5, indication=True)


@user_router.message(StateFilter(FSMQuiz.fill_full_name), IsFullName())
async def msg_full_name(
        msg: Message, state: FSMContext, full_name,
        msg_processor: MessageProcessor):
    logger_user_hand.info(f'–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û:{msg.from_user.id}'
                          f':{await get_username(msg)}')
    await msg.delete()
    logger_user_hand.debug(f'{await state.get_state()=}')
    await state.update_data(full_name=full_name)
    logger_user_hand.debug(f'{await state.get_data()=}')
    await msg_processor.deletes_messages(msgs_for_del=True)
    await msg.answer(LexiconRu.text_gender, reply_markup=kb_select_gender)
    await state.set_state(FSMQuiz.fill_gender)


@user_router.message(StateFilter(FSMQuiz.fill_date_of_revocation),
                     IsCorrectData())
async def msg_sent_date(
        msg: Message, state: FSMContext, date: str,
        msg_processor: MessageProcessor):
    logger_user_hand.debug('Entry')

    await msg.delete()
    await msg_processor.deletes_messages(msgs_for_del=True)
    await state.update_data(date=date)
    logger_user_hand.info(f'–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:{msg.from_user.id}'
                          f':{await get_username(msg)}:[{date}]')
    value = await msg.answer(LexiconRu.text_data_done,
                             reply_markup=kb_back_cancel,
                             disable_web_page_preview=True)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    await state.set_state(FSMQuiz.fill_link_cert)

    logger_user_hand.debug('Exit')


@user_router.callback_query(F.data == 'done', StateFilter(FSMQuiz.end))
async def clbk_done(
        clbk: CallbackQuery, state: FSMContext, redis_data: Redis,
        stepik: Stepik, w_text: bool, msg_processor: MessageProcessor):
    logger_user_hand.debug('Entry')
    stepik_service = StepikService(stepik.client_id, stepik.client_secret,
                                   redis_data)
    logger_user_hand.info(f'–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:{clbk.from_user.id}'
                          f':{await get_username(clbk)}')
    value1 = await clbk.message.edit_text('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è‚åõ\n'
                                          '–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞üìú\n')

    stepik_user_id = await state.get_value('stepik_user_id')
    course_id = str(await state.get_value('course')).split('_')[-1]
    access_token = await stepik_service.get_stepik_access_token()
    certificates = await stepik_service.check_cert_in_stepik(stepik_user_id,
                                                             course_id,
                                                             access_token)
    if certificates == 'PRIVATE':
        value = await clbk.message.edit_text(f'{await get_username(clbk)},'
                                             f'{LexiconRu.text_privacy_instructions}')
        await state.clear()
        await msg_processor.save_msg_id(value, msgs_for_del=True)
        await clbk.answer()
        return

    if certificates:
        try:
            number = await redis_data.incr('end_number')
            number_str = str(number).zfill(6)
            await state.update_data(end_number=number_str)
            await redis_data.set('end_number', number)
        except Exception as err:
            logger_user_hand.error(f'{err=}', exc_info=True)
            value = await clbk.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞,'
                                              ' –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
            await msg_processor.save_msg_id(value, msgs_for_del=True)
            await state.clear()
            logger_user_hand.debug('Exit:error')
            return

        try:
            await clbk.answer('–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞‚Ä¶')
            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            logger_user_hand.info(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è'
                                  f' :{clbk.from_user.id}'
                                  f':{await get_username(clbk)}')
            path = await stepik_service.generate_certificate(state,
                                                             type_update=clbk,
                                                             w_text=w_text)
        except Exception as err:
            logger_user_hand.error(f'{err=}', exc_info=True)
            value = await clbk.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòØ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ '
                                              '–ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫'
                                              ' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éü§ñ')
            await msg_processor.deletes_msg_a_delay(value, 20, indication=True)
            await state.clear()
            return

        try:
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            await stepik_service.send_certificate(clbk, path, state,
                                                  course_id=course_id)
            await msg_processor.deletes_msg_a_delay(value=value1, delay=1)

            # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ promo –º–µ—Å–∞–≥–∏

            # –≤–∑—è—Ç–∏–µ id_promo —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            # msg_promo_id = await redis_data.get(
            #         f'{clbk.from_user.id}_msg_promo_id')
            # logger_user_hand.debug(f'–°–µ—Ä—Ç –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏, id –ø—Ä–æ–º–æ –º—Å–≥ –¥–ª—è '
            #                        f'—É–¥–∞–ª–µ–Ω–∏—è {msg_promo_id=}')
            # if msg_promo_id:
            #     logger_user_hand.debug(f'–£–¥–∞–ª—è–µ–º {msg_promo_id=}')
            #     await clbk.bot.delete_message(str(clbk.message.chat.id),
            #                                   msg_promo_id)
            # msg_promo = await msg_processor.send_message_with_delay(
            #         clbk.message.chat.id, text=LexiconRu.text_promo.format(
            #                 end_date=await shifts_the_date_forward()), delay=15,
            #         preview_link=Links.link_questions_to_ivan)

            # –∑–∞–ø–∏—Å—å id –ø—Ä–æ–º–æ –º–µ—Å–∞–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            # await redis_data.set(f'{clbk.from_user.id}_msg_promo_id',
            #                      str(msg_promo.message_id))
            # logger_user_hand.debug(f'–ó–∞–ø–∏—Å—å id –ø—Ä–æ–º–æ –º—Å–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è '
            #                        f'{msg_promo.message_id=}')

        except Exception as err:
            logger_user_hand.error(f'{err=}', exc_info=True)
        finally:
            await state.clear()
            await clbk.answer()
    else:
        logger_user_hand.info(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä—Ç –Ω–∞ Stepik'
                              f':{clbk.from_user.id}'
                              f':{await get_username(clbk)}')
        value = await clbk.message.answer(f'{await get_username(clbk)}, —É –≤–∞—Å '
                                          f'–ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞üôÅ')
        await msg_processor.deletes_msg_a_delay(value, delay=10, indication=True)
        value = await clbk.message.answer(LexiconRu.text_survey,
                                          reply_markup=kb_butt_quiz,
                                          disable_web_page_preview=True)
        await msg_processor.deletes_msg_a_delay(value1, delay=5, indication=True)
        await msg_processor.save_msg_id(value, msgs_for_del=True)
        await state.clear()
        await clbk.answer()
    logger_user_hand.debug(f'Exit')


@user_router.message(StateFilter(FSMQuiz.fill_link_cert), IsValidProfileLink())
async def msg_sent_stepik_link(
        msg: Message, state: FSMContext, stepik_user_id: str,
        msg_processor: MessageProcessor):
    logger_user_hand.info(f'–°—Å—ã–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:{msg.from_user.id}'
                          f':{await get_username(msg)}:[{msg.text}]')
    # –∑–∞–ø–∏—Å—å Stepik_user_id
    await state.update_data(stepik_user_id=stepik_user_id)
    await msg_processor.deletes_messages(msgs_for_del=True)

    text = (f'{'–ò–º—è:':<7}{await state.get_value('full_name')}\n'
            f'{'–ü–æ–ª:':<7}{BUTT_GENDER[await state.get_value('gender')]}\n'
            f'{'–ö—É—Ä—Å:':<7}{BUTT_COURSES[await state.get_value('course')]}\n'
            f'Stepik_ID:   {await state.get_value('stepik_user_id')}\n'
            f'–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {await state.get_value('date')}')
    await state.set_state(FSMQuiz.end)
    await msg.delete()
    await msg.answer('–ù–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã.\n\n'
                     f'<code>{text}</code>', reply_markup=kb_end_quiz)
