import logging
import re
from datetime import datetime, timedelta

from aiogram.enums import ContentType
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils import get_username
from utils.utils import MessageProcessor

logger_filters = logging.getLogger(__name__)


class IsValidProfileLink(BaseFilter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å,
    –≥–¥–µ —Ü–∏—Ñ—Ä—ã –≤ URL —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    1. –°—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    2. –§–æ—Ä–º–∞—Ç—ã:
       - https://stepik.org/users/USER_ID
       - https://stepik.org/users/USER_ID/profile
       - https://stepik.org/users/USER_ID/
    """
    async def __call__(self, msg: Message, state: FSMContext) -> bool | dict[str, str]:
        msg_processor = MessageProcessor(msg, state)
        text = msg.text.strip()

        # –ò—â–µ—Ç —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
        match = re.search(r'\bhttps?://[^\s/]+/users/(\d+)(?:/profile)?/?\b',
                text, re.IGNORECASE)

        if match:
            stepik_user_id = match.group(1)
            return {'stepik_user_id': stepik_user_id}

        await msg.delete()
        logger_filters.warning(f'–°—Å—ã–ª–∫–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:{msg.from_user.id}'
                              f':{await get_username(msg)}:{msg.text}')
        value = await msg.answer(
                f'{await get_username(msg)}, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, '
                f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await msg_processor.deletes_msg_a_delay(value, delay=6, indication=True)
        return False


class IsAdmins(BaseFilter):
    async def __call__(self, msg: Message, admins: str) -> bool:
        logger_filters.debug('Entry')

        user_id = str(msg.from_user.id)
        admins_id = admins.split()
        logger_filters.debug(f'{admins_id=}')

        logger_filters.debug('Exit')
        return user_id in admins_id


class IsFullName(BaseFilter):
    async def __call__(self, msg: Message, state: FSMContext) -> bool | dict:
        logger_filters.debug(f'Entry {__class__.__name__}')
        msg_processor = MessageProcessor(msg, state)

        # - –†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–µ—Ñ–∏—Å—ã –≤ —Å–ª–æ–≤–∞—Ö (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ)
        # - –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
        pattern = r'''
            ^
            [—ë–∞-—èa-z]+(?:-[—ë–∞-—èa-z]+)?  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º –¥–µ—Ñ–∏—Å–æ–º)
            (?:\s+[—ë–∞-—èa-z]+(?:-[—ë–∞-—èa-z]+)?)+  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            $
        '''

        if msg.content_type != ContentType.TEXT:
            await self._delete_and_notify(msg, msg_processor)
            return False

        text = msg.text.strip()
        words = text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2)
        if len(words) < 2:
            logger_filters.warning(f'–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û:{msg.from_user.id}:'
                                   f'{await get_username(msg)}:'
                                   f'{msg.text}')
            await self._delete_and_notify(msg, msg_processor,
                    message="–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞: –ò–º—è –∏ –§–∞–º–∏–ª–∏—é üòâ")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ñ—Ä
        if (re.fullmatch(pattern, text,
                         flags=re.VERBOSE | re.IGNORECASE) and not any(
                char.isdigit() for char in text)):
            # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–ª–æ–≤ —Å –¥–µ—Ñ–∏—Å–∞–º–∏
            capitalized_words = [
                    "-".join(part.capitalize() for part in word.split("-")) for
                    word in words]
            logger_filters.debug(f'Exit {__class__.__name__}')
            return {'full_name': ' '.join(capitalized_words)}
        else:
            logger_filters.warning(f'–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û:{msg.from_user.id}:'
                                   f'{await get_username(msg)}:'
                                   f'{msg.text}')
            await self._delete_and_notify(msg, msg_processor,
                    message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            return False

    @staticmethod
    async def _delete_and_notify(msg, msg_processor, message: str = None):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        await msg.bot.delete_message(chat_id=msg.chat.id,
                                     message_id=msg.message_id)
        if message:
            response = await msg.answer(f"{await get_username(msg)}, {message}")
            await msg_processor.deletes_msg_a_delay(response, delay=7,
                                                    indication=True)


class IsCorrectData(BaseFilter):
    async def __call__(self,
                       msg: Message,
                       state: FSMContext,
                       msg_processor: MessageProcessor) -> bool | dict[str, str]:
        logger_filters.debug(f'Entry {__class__.__name__}')
        username = await get_username(msg)
        
        if msg.content_type != ContentType.TEXT:
            await msg.bot.delete_message(
                chat_id=msg.chat.id,
                message_id=msg.message_id)
            return False
        
        if not msg.text:
            logger_filters.debug(f'Exit False {__class__.__name__}')
            await msg.bot.delete_message(
                chat_id=msg.chat.id,
                message_id=msg.message_id)
            return False
        
        start_kurse = datetime.strptime('01.03.2024', "%d.%m.%Y")
        date_str = msg.text.strip()
        logger_filters.debug(f'{date_str=}')
        
        try:
            date_obj = datetime.strptime(date_str, "%d.%m.%Y")
            if date_obj.date() < start_kurse.date():
                await msg.bot.delete_message(
                    chat_id=msg.chat.id, message_id=msg.message_id)
                value = await msg.answer(
                    f'{username}, –≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –µ—â–µ –Ω–µ –±—ã–ª '
                    f'—Å–æ–∑–¥–∞–Ω)')
                await msg_processor.deletes_msg_a_delay(
                    value,
                    delay=6,
                    indication=True)
                return False
            
            server_date = datetime.now().date()
            if date_obj.date() > (server_date + timedelta(days=1)):
                await msg.bot.delete_message(
                    chat_id=msg.chat.id, message_id=msg.message_id)
                value = await msg.answer(
                    f'{username}, –≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –∏–∑ –±—É–¥—É—â–µ–≥–æ.\n'
                    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.')
                await msg_processor.deletes_msg_a_delay(
                    value,
                    delay=6,
                    indication=True)
                return False
            
            logger_filters.debug(f'Exit Done {__class__.__name__}')
            return {'date': date_str}
        
        except ValueError:
            logger_filters.warning(
                f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:{username}:'
                f'{msg.from_user.id}:[{date_str}]')
            logger_filters.debug(f'Exit False {__class__.__name__}')
            await msg.bot.delete_message(
                chat_id=msg.chat.id,
                message_id=msg.message_id)
            value = await msg.answer(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            await msg_processor.deletes_msg_a_delay(value, 5, indication=True)
            return False

class IsCorrectEmail(BaseFilter):
    async def __call__(self, msg: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é.
        –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞.
        :param msg: Message
        :return: bool
        """
        if msg.content_type != ContentType.TEXT:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
        email = msg.text.strip()
        pattern = r'''
                ^
                [a-zA-Z0-9_.+-]+    # –õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å (–¥–æ @)
                @
                [a-zA-Z0-9-]+       # –î–æ–º–µ–Ω
                (\.[a-zA-Z0-9-]+)*  # –ü–æ–¥–¥–æ–º–µ–Ω—ã
                \.[a-zA-Z]{2,}      # –í–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π –¥–æ–º–µ–Ω (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã)
                $
            '''
        if re.fullmatch(pattern, email, re.VERBOSE):
            return True
        else:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            return False
