import logging
import re
from datetime import datetime

from aiogram.enums import ContentType
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from utils.utils import MessageProcessor

logger_filters = logging.getLogger(__name__)


class StateGroupFilter(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (StatesGroup).
    –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–ø–¥—ç–π—Ç—ã –ø–æ –≤—Å–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        state_group (StatesGroup): –ì—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, FSMPromoCode),
                                      –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–æ–≤:
        router.message.filter(StateGroupFilter(FSMPromoCode))
        router.callback_query.filter(StateGroupFilter(FSMPromoCode))
    """

    def __init__(self, state_group):
        self.state_group = state_group

    async def __call__(
            self, event: Message | CallbackQuery, state: FSMContext) -> bool:
        current_state = await state.get_state()
        return current_state in [state.state for state in
                self.state_group.__states__.values()]


class IsValidProfileLink(BaseFilter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å,
    –≥–¥–µ —Ü–∏—Ñ—Ä—ã –≤ URL —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–æ–∫:
    1. https://stepik.org/users/USER_ID/profile
    2. https://stepik.org/users/USER_ID
    """

    async def __call__(self, msg: Message, state: FSMContext) -> bool | dict[
        str, str]:
        msg_processor = MessageProcessor(msg, state)
        link = msg.text
        match = re.match(r'^https?://[^/]+/users/(\d+)(?:/profile)?$', link)
        if match:
            stepik_user_id: str = match.group(1)
            return {'stepik_user_id': stepik_user_id}
        await msg.delete()
        value = await msg.answer(f'{msg.from_user.first_name}, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ '
                                 f'–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await msg_processor.deletes_msg_a_delay(value, delay=6, indication=True)
        return False


class IsAdmins(BaseFilter):
    async def __call__(self, msg: Message, admins: str) -> bool:
        logger_filters.debug('Entry')

        user_id = str(msg.from_user.id)
        admins_id = admins.split()

        logger_filters.debug(f'{admins_id}')
        logger_filters.debug('Exit')
        return user_id in admins_id


class IsFullName(BaseFilter):
    async def __call__(self, msg: Message, state: FSMContext) -> bool | dict:
        logger_filters.debug(f'Entry {__class__.__name__}')
        msg_processor = MessageProcessor(msg, state)
        pattern = r'^[—ë–∞-—èa-z]+(?: [—ë–∞-—èa-z]+)+$'

        if msg.content_type != ContentType.TEXT:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            value = await msg.answer(f'{msg.from_user.first_name}, '
                                     f'–≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —Ç–µ–∫—Å—Ç–æ–º '
                                     f';)')
            await msg_processor.deletes_msg_a_delay(value, delay=6,
                                                    indication=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        words = msg.text.split()
        if len(words) < 2:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            value = await msg.answer(f'{msg.from_user.first_name}, '
                                     f'–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞: –ò–º—è –∏ '
                                     f'–§–∞–º–∏–ª–∏—é ;)')
            await msg_processor.deletes_msg_a_delay(value, delay=7,
                                                    indication=True)
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ñ—Ä
        if re.match(pattern, msg.text.lower()) and not any(
                    char.isdigit() for char in msg.text):
            logger_filters.debug(f'Exit True {__class__.__name__}')
            return {'full_name': ' '.join(word.capitalize() for word in words)}
        else:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                        message_id=msg.message_id)
            value = await msg.answer(f'{msg.from_user.first_name}, '
                            f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')
            await msg_processor.deletes_msg_a_delay(value, delay=7,
                                                    indication=True)

            logger_filters.debug(f'Exit False {__class__.__name__}')
            return False


class IsCorrectData(BaseFilter):
    async def __call__(self, msg: Message, state: FSMContext) -> bool | dict[
        str, str]:
        logger_filters.debug(f'Entry {__class__.__name__}')
        msg_processor = MessageProcessor(msg, state)

        if msg.content_type != ContentType.TEXT:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)

        if not msg.text:
            logger_filters.debug(f'Exit False {__class__.__name__}')
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            return False

        start_kurse = datetime.strptime('01.03.2024', "%d.%m.%Y")
        date_str = msg.text
        logger_filters.debug(f'{date_str=}')

        try:
            date_obj = datetime.strptime(date_str, "%d.%m.%Y")

            if date_obj.date() < start_kurse.date():
                await msg.bot.delete_message(chat_id=msg.chat.id,
                                             message_id=msg.message_id)
                value = await msg.answer(f'{msg.from_user.first_name}, '
                                         f'–≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ '
                                         f'–¥–∞—Ç—É, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –µ—â–µ –Ω–µ '
                                         f'—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ªüôÉ\n'
                                         f'–ü–æ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
                await msg_processor.deletes_msg_a_delay(value, delay=6,
                                                        indication=True)
                return False

            if date_obj.date() > datetime.now().date():
                await msg.bot.delete_message(chat_id=msg.chat.id,
                                             message_id=msg.message_id)
                value = await msg.answer(f'{msg.from_user.first_name},'
                                         f' –≤–∞—à–∞ –¥–∞—Ç–∞ –∏–∑ –±—É–¥—É—â–µ–≥–æüòÑ\n'
                                         f'–ü–æ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
                await msg_processor.deletes_msg_a_delay(value, delay=6,
                                                        indication=True)
                raise ValueError

            logger_filters.debug(f'Exit Done {__class__.__name__}')
            return {'date': date_str}

        except ValueError as err:
            logger_filters.warning(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {err=}')
            logger_filters.debug(f'Exit False {__class__.__name__}')
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            value = await msg.answer('–î–∞—Ç–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.\n'
                                     '–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µüßê')
            await msg_processor.deletes_msg_a_delay(value, 5, indication=True)
            return False


class IsCorrectEmail(BaseFilter):
    async def __call__(self, msg: Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é.
        –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞.
        """
        if msg.content_type != ContentType.TEXT:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
        email = msg.text.strip()
        pattern = r'''
                ^
                [a-zA-Z0-9_.+-]+    # –õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å (–¥–æ @)
                @
                [a-zA-Z0-9-]+       # –î–æ–º–µ–Ω
                (\.[a-zA-Z0-9-]+)*  # –ü–æ–¥–¥–æ–º–µ–Ω—ã
                \.[a-zA-Z]{2,}      # –í–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π –¥–æ–º–µ–Ω (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã)
                $
            '''
        if re.fullmatch(pattern, email, re.VERBOSE):
            return True
        else:
            await msg.bot.delete_message(chat_id=msg.chat.id,
                                         message_id=msg.message_id)
            return False
